name: CI/CD Pipeline with GitHub Pages

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '9.0.x'
  BUILD_CONFIGURATION: 'Release'

jobs:
  # Job 1: Build and Unit Tests
  build-and-test:
    runs-on: ubuntu-latest
    name: Build and Unit Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore TheOfficeAPI.sln
      
    - name: Build solution
      run: dotnet build TheOfficeAPI.sln --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore
      
    - name: Run unit tests
      run: dotnet test tests/TheOfficeAPI.Level0.Tests.Unit/TheOfficeAPI.Level0.Tests.Unit.csproj --configuration ${{ env.BUILD_CONFIGURATION }} --no-build --verbosity normal --logger trx --collect:"XPlat Code Coverage"
      
    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Unit Test Results
        path: '**/*.trx'
        reporter: dotnet-trx
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          src/TheOfficeAPI/bin/${{ env.BUILD_CONFIGURATION }}/net9.0/
          src/TheOfficeAPI/obj/

  # Job 2: Mocked Integration Tests
  mocked-integration-tests:
    runs-on: ubuntu-latest
    name: Mocked Integration Tests
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore TheOfficeAPI.sln
      
    - name: Build solution
      run: dotnet build TheOfficeAPI.sln --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore
      
    - name: Run mocked integration tests
      run: dotnet test tests/TheOfficeAPI.Level0.Tests.Integration/TheOfficeAPI.Level0.Tests.Integration.csproj --configuration ${{ env.BUILD_CONFIGURATION }} --no-build --verbosity normal --logger trx --filter "Category=Mocked"
      env:
        ASPNETCORE_ENVIRONMENT: Testing
        
    - name: Publish mocked integration test results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Mocked Integration Test Results
        path: '**/*.trx'
        reporter: dotnet-trx

  # Job 3: Generate API Documentation and Deploy to GitHub Pages
  deploy-docs:
    runs-on: ubuntu-latest
    name: Deploy API Documentation
    needs: [build-and-test, mocked-integration-tests]
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Restore dependencies
      run: dotnet restore TheOfficeAPI.sln
      
    - name: Build solution
      run: dotnet build TheOfficeAPI.sln --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore
      
    - name: Install Swagger Codegen CLI
      run: |
        npm install -g @apidevtools/swagger-parser
        npm install -g redoc-cli
        
    - name: Generate OpenAPI specification
      run: |
        cd src/TheOfficeAPI
        dotnet run --configuration ${{ env.BUILD_CONFIGURATION }} --no-build &
        API_PID=$!
        
        # Wait for the API to start
        echo "Waiting for API to start..."
        for i in {1..30}; do
          if curl -s http://localhost:5000/swagger/v1/swagger.json > /dev/null; then
            echo "API is running"
            break
          fi
          sleep 2
        done
        
        # Download the OpenAPI spec
        curl -o swagger.json http://localhost:5000/swagger/v1/swagger.json
        
        # Stop the API
        kill $API_PID
        
        # Verify the spec was downloaded
        ls -la swagger.json
        cat swagger.json | head -20
      env:
        ASPNETCORE_ENVIRONMENT: Production
        ASPNETCORE_URLS: http://localhost:5000
        
    - name: Generate static documentation
      run: |
        cd src/TheOfficeAPI
        
        # Create docs directory
        mkdir -p ../../docs
        
        # Generate ReDoc documentation
        npx redoc-cli build swagger.json --output ../../docs/index.html --title "The Office API Documentation"
        
        # Copy the swagger.json for direct access
        cp swagger.json ../../docs/swagger.json
        
        # Create a simple index page if ReDoc fails
        if [ ! -f ../../docs/index.html ]; then
          cat > ../../docs/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>The Office API Documentation</title>
        </head>
        <body>
            <div id="swagger-ui"></div>
            <script src="https://unpkg.com/swagger-ui-dist@4.15.5/swagger-ui-bundle.js"></script>
            <script src="https://unpkg.com/swagger-ui-dist@4.15.5/swagger-ui-standalone-preset.js"></script>
            <link rel="stylesheet" type="text/css" href="https://unpkg.com/swagger-ui-dist@4.15.5/swagger-ui.css" />
            <script>
              window.onload = function() {
                SwaggerUIBundle({
                  url: './swagger.json',
                  dom_id: '#swagger-ui',
                  presets: [
                    SwaggerUIBundle.presets.apis,
                    SwaggerUIStandalonePreset
                  ],
                  layout: "StandaloneLayout"
                })
              }
            </script>
        </body>
        </html>
        EOF
        fi
        
        # List generated files
        ls -la ../../docs/
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: './docs'
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  # Job 4: Health Check Integration Tests
  health-check:
    runs-on: ubuntu-latest
    name: Health Check Integration Tests
    needs: deploy-docs
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Wait for GitHub Pages deployment
      run: sleep 30  # Wait for Pages to be available
      
    - name: Health check GitHub Pages deployment
      run: |
        # Check if the documentation is accessible
        PAGES_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
        echo "Checking Pages URL: $PAGES_URL"
        
        # Check main documentation page
        curl -f "$PAGES_URL/" || exit 1
        
        # Check swagger.json is accessible
        curl -f "$PAGES_URL/swagger.json" || exit 1
        
        echo "✅ GitHub Pages deployment is healthy"
      continue-on-error: false
      
    - name: Restore dependencies for tests
      run: dotnet restore TheOfficeAPI.sln
      
    - name: Build solution for tests
      run: dotnet build TheOfficeAPI.sln --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore
      
    - name: Run health check integration tests
      run: dotnet test tests/TheOfficeAPI.Level0.Tests.Integration/TheOfficeAPI.Level0.Tests.Integration.csproj --configuration ${{ env.BUILD_CONFIGURATION }} --no-build --verbosity normal --logger trx --filter "Category=HealthCheck"
      env:
        ASPNETCORE_ENVIRONMENT: Production
        DOCS_BASE_URL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}
        
    - name: Publish health check test results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Health Check Test Results
        path: '**/*.trx'
        reporter: dotnet-trx

  # Job 5: Documentation Integration Tests
  documentation-integration-tests:
    runs-on: ubuntu-latest
    name: Documentation Integration Tests
    needs: health-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore TheOfficeAPI.sln
      
    - name: Build solution
      run: dotnet build TheOfficeAPI.sln --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore
      
    - name: Validate OpenAPI specification
      run: |
        PAGES_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
        
        # Download the deployed swagger.json
        curl -o deployed-swagger.json "$PAGES_URL/swagger.json"
        
        # Basic validation of the OpenAPI spec
        echo "Validating OpenAPI specification..."
        
        # Check if it's valid JSON
        cat deployed-swagger.json | jq . > /dev/null
        
        # Check for required OpenAPI fields
        jq -e '.openapi' deployed-swagger.json
        jq -e '.info.title' deployed-swagger.json
        jq -e '.paths' deployed-swagger.json
        
        echo "✅ OpenAPI specification is valid"
        
    - name: Run documentation integration tests
      run: dotnet test tests/TheOfficeAPI.Level0.Tests.Integration/TheOfficeAPI.Level0.Tests.Integration.csproj --configuration ${{ env.BUILD_CONFIGURATION }} --no-build --verbosity normal --logger trx --filter "Category=Documentation"
      env:
        ASPNETCORE_ENVIRONMENT: Production
        DOCS_BASE_URL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}
        
    - name: Publish documentation test results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Documentation Integration Test Results
        path: '**/*.trx'
        reporter: dotnet-trx

  # Job 6: Notify on completion
  notify:
    runs-on: ubuntu-latest
    name: Notify Completion
    needs: [build-and-test, mocked-integration-tests, deploy-docs, health-check, documentation-integration-tests]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.documentation-integration-tests.result == 'success'
      run: |
        echo "🎉 CI/CD Pipeline completed successfully!"
        echo "📚 API Documentation deployed to: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
        echo "📄 OpenAPI Spec available at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/swagger.json"
        
    - name: Notify failure
      if: failure()
      run: |
        echo "❌ CI/CD Pipeline failed!"
        echo "Check the logs for details."
